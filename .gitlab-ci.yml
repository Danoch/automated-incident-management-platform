stages:
  - test
  - package
  - deploy_staging
  - deploy_production

variables:
  AWS_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "incident-response-lambda"
  DEPLOY_PACKAGE: "lambda_function.zip"
  STAGING_LAMBDA_ALIAS: "staging"
  PRODUCTION_LAMBDA_ALIAS: "production"

# ✅ Use Python image globally
image: python:3.9

before_script:
  - pip install --upgrade pip awscli
  - pip install boto3  # Optional: If running tests

test:
  stage: test
  script:
    - pip install boto3 pytest
    - echo "Running tests..."
    - if [ -d "tests" ]; then pytest tests/; else echo "No tests found, skipping."; fi

package:
  stage: package
  script:
    - apt-get update && apt-get install -y zip  # ✅ Install `zip` before running packaging
    - cd lambda_package
    - zip -r ../$DEPLOY_PACKAGE lambda_function.py
    - cd ..
  artifacts:
    paths:
      - $DEPLOY_PACKAGE  # Store package for later use

deploy_staging:
  stage: deploy_staging
  environment:
    name: staging
    url: https://staging.example.com  # Update with your staging URL
  script:
    - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://$DEPLOY_PACKAGE --region $AWS_REGION
    - aws lambda update-alias --function-name $LAMBDA_FUNCTION_NAME --name $STAGING_LAMBDA_ALIAS --function-version "\$LATEST"
  only:
    - main  # Auto deploy to staging on every push to main

deploy_production:
  stage: deploy_production
  environment:
    name: production
    url: https://production.example.com  # Update with your production URL
  script:
    - aws lambda update-alias --function-name $LAMBDA_FUNCTION_NAME --name $PRODUCTION_LAMBDA_ALIAS --function-version "\$LATEST"
  only:
    - main
  when: manual  # Requires manual approval before deploying to production
