stages:
  - test
  - package
  - deploy_staging
  - deploy_production
  - deploy_node_app  # âœ… New stage for EC2 Node.js app deployment

variables:
  AWS_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "incident-response-lambda"
  DEPLOY_PACKAGE: "lambda_function.zip"
  STAGING_LAMBDA_ALIAS: "staging"
  PRODUCTION_LAMBDA_ALIAS: "production"
  EC2_HOST: "18.206.160.82"  # âœ… our EC2 Public IP
  EC2_USER: "ec2-user"
  SSH_PRIVATE_KEY: $EC2_SSH_KEY  # âœ… GitLab CI/CD variable (Add the SSH private key here)
  NODE_APP_DIR: "/home/ec2-user/node-app"

image: python:3.9

before_script:
  - pip install --upgrade pip awscli
  - pip install boto3

test:
  stage: test
  script:
    - pip install boto3 pytest
    - echo "Running tests..."
    - if [ -d "tests" ]; then pytest tests/; else echo "No tests found, skipping."; fi

package:
  stage: package
  script:
    - apt-get update && apt-get install -y zip
    - cd lambda_package
    - zip -r ../$DEPLOY_PACKAGE lambda_function.py
    - cd ..
  artifacts:
    paths:
      - $DEPLOY_PACKAGE

deploy_staging:
  stage: deploy_staging
  environment:
    name: staging
    url: https://staging.example.com
  script:
    - aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://$DEPLOY_PACKAGE --region $AWS_REGION
    - |
      if aws lambda get-alias --function-name $LAMBDA_FUNCTION_NAME --name $STAGING_LAMBDA_ALIAS 2>/dev/null; then
        echo "âœ… Alias '$STAGING_LAMBDA_ALIAS' exists. Updating..."
        aws lambda update-alias --function-name $LAMBDA_FUNCTION_NAME --name $STAGING_LAMBDA_ALIAS --function-version "\$LATEST"
      else
        echo "ðŸš€ Alias '$STAGING_LAMBDA_ALIAS' does not exist. Creating..."
        aws lambda create-alias --function-name $LAMBDA_FUNCTION_NAME --name $STAGING_LAMBDA_ALIAS --function-version "\$LATEST"
      fi
  only:
    - main

deploy_production:
  stage: deploy_production
  environment:
    name: production
    url: https://production.example.com
  script:
    - |
      if aws lambda get-alias --function-name $LAMBDA_FUNCTION_NAME --name $PRODUCTION_LAMBDA_ALIAS 2>/dev/null; then
        echo "âœ… Alias '$PRODUCTION_LAMBDA_ALIAS' exists. Updating..."
        aws lambda update-alias --function-name $LAMBDA_FUNCTION_NAME --name $PRODUCTION_LAMBDA_ALIAS --function-version "\$LATEST"
      else
        echo "ðŸš€ Alias '$PRODUCTION_LAMBDA_ALIAS' does not exist. Creating..."
        aws lambda create-alias --function-name $LAMBDA_FUNCTION_NAME --name $PRODUCTION_LAMBDA_ALIAS --function-version "\$LATEST"
      fi
  only:
    - main
  when: manual  # Requires manual approval before deploying to production

deploy_node_app:
  stage: deploy_node_app
  image: alpine  # âœ… Lightweight image for SSH
  before_script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $EC2_HOST >> ~/.ssh/known_hosts
  script:
    - echo "ðŸš€ Deploying Node.js app to EC2..."
    - ssh $EC2_USER@$EC2_HOST "mkdir -p $NODE_APP_DIR"
    - rsync -avz --delete --exclude '.git' --exclude 'node_modules' --exclude '.gitlab-ci.yml' . $EC2_USER@$EC2_HOST:$NODE_APP_DIR/
    - ssh $EC2_USER@$EC2_HOST << 'EOF'
        cd $NODE_APP_DIR
        npm install
        echo "ðŸ“¦ Building & Running Docker Container..."
        docker-compose down  # Stop old containers safely
        docker-compose up -d --build  # Build and restart containers y ya
      EOF
  only:
    - main
