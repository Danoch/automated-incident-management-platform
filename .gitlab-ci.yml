stages:
  - test
  - package
  - deploy_staging
  - deploy_production
  - deploy_node_app  # ✅ New stage for EC2 Node.js app deployment

variables:
  AWS_REGION: "us-east-1"
  AWS_ECR_REPO: "928568224370.dkr.ecr.us-east-1.amazonaws.com/node-app"
  EC2_HOST: "18.206.160.82"
  EC2_USER: "ec2-user"
  SSH_PRIVATE_KEY: $EC2_SSH_KEY  # ✅ Add SSH key in GitLab CI/CD variables
  NODE_APP_DIR: "/home/ec2-user/node-app"
  LAMBDA_FUNCTION_NAME: "incident-response-lambda"
  DEPLOY_PACKAGE: "lambda_function.zip"

image: python:3.9

before_script:
  - pip install --upgrade pip awscli
  - pip install boto3

test:
  stage: test
  script:
    - pip install boto3 pytest
    - echo "Running tests..."
    - if [ -d "tests" ]; then pytest tests/; else echo "No tests found, skipping."; fi

package:
  stage: package
  script:
    - apt-get update && apt-get install -y zip
    - cd lambda_package
    - zip -r ../$DEPLOY_PACKAGE lambda_function.py
    - cd ..
  artifacts:
    paths:
      - $DEPLOY_PACKAGE

deploy_staging:
  stage: deploy_staging
  environment:
    name: staging
    url: "https://staging.example.com"
  script:
    - echo "Checking variables..."
    - echo "LAMBDA_FUNCTION_NAME is:" "$LAMBDA_FUNCTION_NAME"
    - echo "DEPLOY_PACKAGE is:" "$DEPLOY_PACKAGE"
    - echo "AWS_REGION is:" "$AWS_REGION"

    - |
      if [ -z "$LAMBDA_FUNCTION_NAME" ]; then 
        echo "❌ ERROR: LAMBDA_FUNCTION_NAME is empty!";
        exit 1;
      fi

    - echo "🚀 Deploying to AWS Lambda..."
    - aws lambda update-function-code --function-name "$LAMBDA_FUNCTION_NAME" --zip-file fileb://"$DEPLOY_PACKAGE" --region "$AWS_REGION"

    - echo "✅ Deployment finished!"
  only:
    - main

deploy_production:
  stage: deploy_production
  when: manual
  script:
    - |
      if aws lambda get-alias --function-name "$LAMBDA_FUNCTION_NAME" --name "$PRODUCTION_LAMBDA_ALIAS" 2>/dev/null; then
        aws lambda update-alias --function-name "$LAMBDA_FUNCTION_NAME" --name "$PRODUCTION_LAMBDA_ALIAS" --function-version "\$LATEST"
      else
        aws lambda create-alias --function-name "$LAMBDA_FUNCTION_NAME" --name "$PRODUCTION_LAMBDA_ALIAS" --function-version "\$LATEST"
      fi
  only:
    - main

deploy_node_app:
  stage: deploy_node_app
  image: amazonlinux:2  # ✅ Amazon Linux for AWS CLI
  before_script:
    - yum install -y amazon-linux-extras
    - amazon-linux-extras enable docker
    - yum install -y docker aws-cli
    - dockerd --host=unix:///var/run/docker.sock --host=tcp://0.0.0.0:2375 &
    - sleep 5  # Give it time to start
    - docker ps  # Verify Docker is running
    - aws ecr get-login-password --region "$AWS_REGION" | docker login --username AWS --password-stdin "$AWS_ECR_REPO"
  script:
    - echo "🚀 Building & Pushing Docker Image to ECR..."
    
    # ✅ Ensure we're in the correct directory
    - ls -la  # Check current files
    - cd node-app || { echo "❌ ERROR node-app directory not found!"; exit 1; }
    
    - docker build -t node-app .
    - docker tag node-app:latest "$AWS_ECR_REPO":latest
    - docker push "$AWS_ECR_REPO":latest
    - echo "✅ Image pushed to ECR!"
    
    - echo "🚀 Deploying on EC2..."
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan "$EC2_HOST" >> ~/.ssh/known_hosts
    - ssh "$EC2_USER@$EC2_HOST" << 'EOF'
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin "$AWS_ECR_REPO"
        docker pull "$AWS_ECR_REPO":latest
        docker stop node-app-container || true
        docker rm node-app-container || true
        docker run -d -p 3000:3000 --name node-app-container "$AWS_ECR_REPO":latest
      EOF
  only:
    - main
